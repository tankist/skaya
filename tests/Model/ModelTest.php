<?php

//require_once APPLICATION_PATH . '/models/Abstract.php';

/**
 * Test class for Model_Abstract.
 * Generated by PHPUnit on 2011-02-13 at 01:55:12.
 */
class ModelTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Model_Abstract
     */
    protected $_email = 'email@email.com';
	
	protected $_password = '123';
	
    /**
     * @var Model_Abstract
     */
	protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        parent::setUp();
        $this->_resetModel();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testPopulate().
     */
    public function testPopulate() {
        $newEmail = 'newemail@email.com';
		$newPassword = 'test123';
		
		//Populate from array
		$this->_object->populate(array(
			'email' => $newEmail,
			'password' => $newPassword
		));
		$this->assertEquals($newEmail, $this->_object->email);
		$this->assertEquals($newPassword, $this->_object->password);
		
		$this->_resetModel();
		
		//Populate from object
		$newDefinition = new stdClass();
		$newDefinition->email = $newEmail;
		$newDefinition->password = $newPassword;
		$this->_object->populate($newDefinition);
		$this->assertEquals($newEmail, $this->_object->email);
		$this->assertEquals($newPassword, $this->_object->password);
		
		$this->_resetModel();
		
		//Popualte with Model
		$another = $this->getMockForAbstractClass('Skaya_Model_Abstract');
		$another->populate($this->_object);
		$this->assertEquals($this->_email, $another->email);
		$this->assertEquals($this->_password, $another->password);
		
		$this->_resetModel();
    }

    /**
     * @todo Implement test__set().
     */
    public function testGetSet() {
        $testValue = 'testValue';
		$this->_object->someTestValue = $testValue;
		$this->assertTrue(isset ($this->_object->someTestValue));
		$this->assertEquals($testValue, $this->_object->someTestValue);
	    //Test custom getter/setter
	    $this->_object->value = $testValue;
		$this->assertEquals($testValue, $this->_object->value);
    }

    /**
     * @todo Implement test__isset().
     */
    public function testIsset() {
        $this->assertTrue(isset($this->_object->email));
		$this->assertFalse(isset($this->_object->junkField));
    }

    /**
     * @todo Implement test__unset().
     */
    public function testUnset() {
        unset($this->_object->email);
		$this->assertFalse(isset ($this->_object->email));
    }

    /**
     * @todo Implement testToArray().
     */
    public function testToArray() {
        //Simple test
		$array = $this->_object->toArray();
		$this->assertInternalType('array', $array);
		$this->assertArrayHasKey('email', $array);
		$this->assertArrayHasKey('password', $array);
		$this->assertEquals($this->_email, $array['email']);
		$this->assertEquals($this->_password, $array['password']);
		
		//Test with nested objects
		$testValue = 'testValue';
		
		$this->_object->nestedSimpleObject = new stdClass();
		$this->_object->nestedSimpleObject->testValue = $testValue;
		$this->_object->nestedModel = $this->getMockForAbstractClass('Skaya_Model_Abstract', array(array(
			'testValue' => $testValue
		)));
		$array = $this->_object->toArray();
		$this->assertArrayHasKey('nestedSimpleObject', $array);
		$this->assertArrayHasKey('nestedModel', $array);
		$this->assertEquals($testValue, $array['nestedModel']['testValue']);
    }

	public function testIsEmpty() {
		$testValue = 'testValue';
		$testObject = new TestModel();
		$this->assertTrue($testObject->isEmpty());
		$testObject->someTestValue = $testValue;
		$this->assertFalse($testObject->isEmpty());
	}

    /**
     * @todo Implement testGetMapper().
     */
    public function testGetMapper() {
        $mapper = $this->_object->getMapper();
        $this->assertInstanceOf('MyApp_Db_Test', $mapper);
    }
    
    /**
	 * @expectedException Skaya_Model_Exception
	 */
	public function testExceptions() {
		//Testing with wrong parameters sent to constructor
		$failedUser = $this->_object->populate(1);
	}
	
	/**
	 * @expectedException Skaya_Model_Exception
	 */
	public function testSetterExceptions() {
		//Testing empty set parameter
		$parameter = '';
		$this->_object->$parameter = 123;
	}
    
    protected function _resetModel() {
		if (!$this->_object) {
			$this->_object = new TestModel();
            Skaya_Model_Mapper_MapperBroker::addPath(
                realpath(TESTS_PATH . '/Model/mappers/_files/mappers/'),
                'MyApp'
            );
		}
		$this->_object->populate(array(
			'email' => $this->_email,
			'password' => $this->_password
		));
	}

}

class TestModel extends Skaya_Model_Abstract {

    protected $_modelName = 'test';

	protected $_value;

	public function setValue($value) {
		$this->_value = $value;
		return $this;
	}

	public function getValue() {
		return $this->_value;
	}
}